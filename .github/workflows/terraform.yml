name: 'Terraform'

on:
  push:
    branches: [ "test1-branch" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}

    # Manual approval before applying Terraform changes
    - name: Await Manual Approval
      uses: hmarr/await-approval-action@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        # Optional: Add custom approval message
        approval_message: 'Please approve the Terraform apply in production.'

    # Apply the changes required to reach the desired state of the configuration
    - name: Terraform Apply
      if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' }}
      run: terraform apply -auto-approve -input=false
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
